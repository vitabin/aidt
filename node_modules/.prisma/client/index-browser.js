
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.15.1
 * Query Engine version: 5675a3182f972f1a8f31d16eee6abf4fd54910e3
 */
Prisma.prismaVersion = {
  client: "5.15.1",
  engine: "5675a3182f972f1a8f31d16eee6abf4fd54910e3"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ProblemScalarFieldEnum = {
  id: 'id',
  cls_id: 'cls_id',
  type: 'type',
  difficulty: 'difficulty',
  latex_data: 'latex_data',
  explanation: 'explanation',
  ai_hint: 'ai_hint',
  detail_solution: 'detail_solution',
  answer_data: 'answer_data',
  answer_type: 'answer_type',
  target_grade: 'target_grade',
  target_semester: 'target_semester',
  is_ebs: 'is_ebs',
  is_algeomath: 'is_algeomath',
  content_status: 'content_status',
  manage_no: 'manage_no',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.StudyScalarFieldEnum = {
  id: 'id',
  learning_sys_id: 'learning_sys_id',
  type: 'type',
  basic_video: 'basic_video',
  created_at: 'created_at'
};

exports.Prisma.Study_problemScalarFieldEnum = {
  id: 'id',
  study_id: 'study_id',
  problem_id: 'problem_id',
  created_at: 'created_at'
};

exports.Prisma.Study_performScalarFieldEnum = {
  id: 'id',
  study_problem_id: 'study_problem_id',
  user_uuid: 'user_uuid',
  solving_start: 'solving_start',
  solving_end: 'solving_end',
  confidence: 'confidence',
  submission_answer: 'submission_answer',
  is_correct: 'is_correct',
  created_at: 'created_at'
};

exports.Prisma.Shared_solution_videoScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  video_path: 'video_path',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  problem_id: 'problem_id'
};

exports.Prisma.Shared_solution_video_dataScalarFieldEnum = {
  id: 'id',
  like_count: 'like_count',
  view_count: 'view_count',
  play_count: 'play_count',
  pause_count: 'pause_count',
  watch_time: 'watch_time',
  shared_solution_video_id: 'shared_solution_video_id'
};

exports.Prisma.Shared_solution_video_likeScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  created_at: 'created_at',
  shared_solution_video_id: 'shared_solution_video_id'
};

exports.Prisma.Shared_solution_video_commentScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  created_at: 'created_at',
  updated_at: 'updated_at',
  content: 'content',
  deleted_at: 'deleted_at',
  shared_solution_video_id: 'shared_solution_video_id'
};

exports.Prisma.Shared_solution_video_shareScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  created_at: 'created_at',
  shared_solution_video_id: 'shared_solution_video_id',
  scope: 'scope',
  pinned: 'pinned',
  school_class_id: 'school_class_id'
};

exports.Prisma.Concept_videoScalarFieldEnum = {
  id: 'id',
  scope: 'scope',
  user_uuid: 'user_uuid',
  video_path: 'video_path',
  status: 'status',
  concept_id: 'concept_id',
  created_at: 'created_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Concept_video_dataScalarFieldEnum = {
  id: 'id',
  like_count: 'like_count',
  view_count: 'view_count',
  concept_video_id: 'concept_video_id'
};

exports.Prisma.Concept_video_likeScalarFieldEnum = {
  id: 'id',
  concept_video_id: 'concept_video_id',
  user_uuid: 'user_uuid',
  created_at: 'created_at'
};

exports.Prisma.Concept_video_commentScalarFieldEnum = {
  id: 'id',
  concept_video_data_id: 'concept_video_data_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  content: 'content',
  user_uuid: 'user_uuid'
};

exports.Prisma.Concept_video_shareScalarFieldEnum = {
  id: 'id',
  concept_video_id: 'concept_video_id',
  class_table_id: 'class_table_id',
  pinned: 'pinned'
};

exports.Prisma.AssessmentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  learning_map_id: 'learning_map_id',
  learning_sys_id: 'learning_sys_id',
  created_at: 'created_at',
  begun_at: 'begun_at',
  duration_in_second: 'duration_in_second'
};

exports.Prisma.Assessment_classScalarFieldEnum = {
  id: 'id',
  assessment_id: 'assessment_id',
  school_class_id: 'school_class_id'
};

exports.Prisma.UserScalarFieldEnum = {
  user_uuid: 'user_uuid',
  learning_map_id: 'learning_map_id',
  current_learning_node_id: 'current_learning_node_id',
  created_at: 'created_at'
};

exports.Prisma.User_achievementScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  is_force_apply: 'is_force_apply',
  learning_map_id: 'learning_map_id',
  learning_map_node_id: 'learning_map_node_id',
  learning_sys_id: 'learning_sys_id',
  learning_level_group_id: 'learning_level_group_id',
  learning_level_id: 'learning_level_id',
  achievement_type: 'achievement_type',
  achievement_score: 'achievement_score',
  created_at: 'created_at'
};

exports.Prisma.User_groupScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  created_at: 'created_at'
};

exports.Prisma.Announcement_contentScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  school_class_id: 'school_class_id',
  view_count: 'view_count',
  grade: 'grade',
  scope: 'scope',
  type: 'type',
  title: 'title',
  content: 'content',
  file_path: 'file_path',
  publish_start: 'publish_start',
  publish_end: 'publish_end',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Announcement_commentScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  comment_data: 'comment_data',
  created_at: 'created_at',
  updated_at: 'updated_at',
  announcement_id: 'announcement_id'
};

exports.Prisma.Announcement_content_likeScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  created_at: 'created_at',
  announcement_commentId: 'announcement_commentId',
  announcement_content_id: 'announcement_content_id'
};

exports.Prisma.Learning_levelScalarFieldEnum = {
  id: 'id',
  level: 'level',
  level_group_id: 'level_group_id',
  achievement_score_from: 'achievement_score_from',
  achievement_score_to: 'achievement_score_to',
  total_quest_count: 'total_quest_count',
  base_lv_low_count: 'base_lv_low_count',
  base_lv_medium_count: 'base_lv_medium_count',
  base_lv_high_count: 'base_lv_high_count',
  base_lv_highest_count: 'base_lv_highest_count',
  pre_lv_1_count: 'pre_lv_1_count',
  pre_lv_2_count: 'pre_lv_2_count',
  pre_lv_3_count: 'pre_lv_3_count',
  created_at: 'created_at'
};

exports.Prisma.Learning_level_groupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  is_default: 'is_default',
  learning_map_id: 'learning_map_id',
  created_at: 'created_at'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  problem_id: 'problem_id',
  learning_sys_id: 'learning_sys_id',
  status: 'status',
  question_user_uuid: 'question_user_uuid',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  title: 'title',
  scope: 'scope',
  shared_solution_video_id: 'shared_solution_video_id'
};

exports.Prisma.Std_learning_sys_packScalarFieldEnum = {
  id: 'id',
  cls_id: 'cls_id',
  name: 'name',
  publish_at: 'publish_at',
  desc: 'desc',
  is_activate: 'is_activate',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Std_learning_sys_docScalarFieldEnum = {
  id: 'id',
  std_learning_sys_pack_id: 'std_learning_sys_pack_id',
  cls_id: 'cls_id',
  name: 'name',
  is_deleted: 'is_deleted',
  careted_at: 'careted_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Std_learning_sysScalarFieldEnum = {
  id: 'id',
  std_learning_sys_doc_id: 'std_learning_sys_doc_id',
  cls_id: 'cls_id',
  type: 'type',
  name: 'name',
  achievement_id: 'achievement_id',
  achievement_desc: 'achievement_desc',
  grade: 'grade',
  parent_id: 'parent_id',
  subject_main: 'subject_main',
  subject_sub: 'subject_sub',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Learning_sys_packScalarFieldEnum = {
  id: 'id',
  std_learning_sys_pack_id: 'std_learning_sys_pack_id',
  name: 'name',
  desc: 'desc',
  is_activate: 'is_activate',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Learning_sys_docScalarFieldEnum = {
  id: 'id',
  learning_sys_pack_id: 'learning_sys_pack_id',
  name: 'name',
  desc: 'desc',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Learning_sysScalarFieldEnum = {
  id: 'id',
  learning_sys_doc_id: 'learning_sys_doc_id',
  grade: 'grade',
  semester: 'semester',
  cls_id: 'cls_id',
  type: 'type',
  index: 'index',
  name: 'name',
  full_name: 'full_name',
  achievement_desc: 'achievement_desc',
  achievement_id: 'achievement_id',
  parent_id: 'parent_id',
  is_deleted: 'is_deleted',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  pre_learning_map_id: 'pre_learning_map_id'
};

exports.Prisma.Pre_learning_mapScalarFieldEnum = {
  id: 'id',
  learning_sys_id: 'learning_sys_id',
  cls_id: 'cls_id',
  lv1_cls_id: 'lv1_cls_id',
  lv2_cls_id: 'lv2_cls_id',
  lv3_cls_id: 'lv3_cls_id',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Learning_mapScalarFieldEnum = {
  id: 'id',
  learning_sys_doc_id: 'learning_sys_doc_id',
  semester_id: 'semester_id',
  name: 'name',
  subject: 'subject',
  desc: 'desc',
  created_at: 'created_at'
};

exports.Prisma.Learning_map_nodeScalarFieldEnum = {
  id: 'id',
  learning_map_id: 'learning_map_id',
  learning_sys_id: 'learning_sys_id',
  pre_learning_map_id: 'pre_learning_map_id',
  link_prev: 'link_prev',
  link_next: 'link_next',
  created_at: 'created_at',
  updated_at: 'updated_at',
  week: 'week'
};

exports.Prisma.SemesterScalarFieldEnum = {
  id: 'id',
  year: 'year',
  grade: 'grade',
  semester: 'semester',
  begin_date: 'begin_date',
  end_date: 'end_date',
  desc: 'desc',
  created_at: 'created_at'
};

exports.Prisma.School_classScalarFieldEnum = {
  id: 'id',
  school_id: 'school_id',
  learning_map_id: 'learning_map_id',
  grade: 'grade',
  class: 'class',
  created_at: 'created_at'
};

exports.Prisma.Class_scheduleScalarFieldEnum = {
  id: 'id',
  class_id: 'class_id',
  day_week: 'day_week',
  class_period: 'class_period',
  subject_name: 'subject_name',
  classroom_name: 'classroom_name',
  created_at: 'created_at'
};

exports.Prisma.SchoolScalarFieldEnum = {
  id: 'id',
  school_id: 'school_id',
  school_name: 'school_name',
  division_type: 'division_type',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Assignment_finishScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  assignment_gave_id: 'assignment_gave_id',
  finished_at: 'finished_at',
  created_at: 'created_at'
};

exports.Prisma.Assignment_gaveScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  learning_map_id: 'learning_map_id',
  learning_sys_id: 'learning_sys_id',
  given_at: 'given_at',
  type: 'type',
  created_at: 'created_at'
};

exports.Prisma.Assignment_gave_nodeScalarFieldEnum = {
  id: 'id',
  assignment_gave_id: 'assignment_gave_id',
  node_id: 'node_id'
};

exports.Prisma.Assignment_gave_userScalarFieldEnum = {
  id: 'id',
  assignment_gave_id: 'assignment_gave_id',
  user_uuid: 'user_uuid'
};

exports.Prisma.Assignment_problemScalarFieldEnum = {
  id: 'id',
  assignment_gave_user_id: 'assignment_gave_user_id',
  problem_id: 'problem_id',
  status: 'status',
  created_at: 'created_at'
};

exports.Prisma.Assignment_performScalarFieldEnum = {
  id: 'id',
  assignment_problem_id: 'assignment_problem_id',
  submission_answer: 'submission_answer',
  is_correct: 'is_correct',
  confidence: 'confidence',
  created_at: 'created_at'
};

exports.Prisma.Assessment_performScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  assessment_problem_id: 'assessment_problem_id',
  solving_start: 'solving_start',
  solving_end: 'solving_end',
  submission_answer: 'submission_answer',
  is_correct: 'is_correct',
  created_at: 'created_at'
};

exports.Prisma.Assessment_problemScalarFieldEnum = {
  id: 'id',
  assessment_id: 'assessment_id',
  problem_id: 'problem_id',
  created_at: 'created_at'
};

exports.Prisma.AdminScalarFieldEnum = {
  pid: 'pid',
  name: 'name',
  email: 'email',
  division: 'division',
  admin_group_id: 'admin_group_id',
  period_start: 'period_start',
  period_end: 'period_end',
  is_delete: 'is_delete',
  delete_at: 'delete_at',
  updated_at: 'updated_at',
  created_at: 'created_at',
  login_fail_cnt: 'login_fail_cnt',
  sso_access_token: 'sso_access_token',
  sso_refresh_token: 'sso_refresh_token',
  sso_id: 'sso_id',
  sso_token_expire: 'sso_token_expire'
};

exports.Prisma.Admin_create_historyScalarFieldEnum = {
  pid: 'pid',
  name: 'name',
  password: 'password',
  email: 'email',
  division: 'division',
  admin_id: 'admin_id',
  admin_group_id: 'admin_group_id',
  proc_type: 'proc_type',
  proc_status: 'proc_status',
  proc_datetime: 'proc_datetime',
  created_at: 'created_at'
};

exports.Prisma.Admin_functionScalarFieldEnum = {
  pid: 'pid',
  name: 'name',
  desc: 'desc',
  is_delete: 'is_delete',
  delete_at: 'delete_at',
  updated_at: 'updated_at',
  created_at: 'created_at'
};

exports.Prisma.Admin_function_on_admin_groupScalarFieldEnum = {
  admin_group_id: 'admin_group_id',
  admin_function_id: 'admin_function_id',
  created_at: 'created_at'
};

exports.Prisma.Admin_groupScalarFieldEnum = {
  pid: 'pid',
  name: 'name',
  is_delete: 'is_delete',
  delete_at: 'delete_at',
  updated_at: 'updated_at',
  created_at: 'created_at'
};

exports.Prisma.User_plan_noteScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  dream_jobs: 'dream_jobs',
  dream_reason: 'dream_reason',
  created_at: 'created_at'
};

exports.Prisma.User_statusScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  status_message: 'status_message',
  physical_state: 'physical_state',
  mental_state: 'mental_state',
  created_at: 'created_at'
};

exports.Prisma.Common_concept_videoScalarFieldEnum = {
  id: 'id',
  concept_id: 'concept_id',
  title: 'title',
  commentary: 'commentary',
  video_path: 'video_path',
  subtitle_path: 'subtitle_path',
  sign_video_path: 'sign_video_path',
  status: 'status',
  created_by: 'created_by',
  created_at: 'created_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Common_concept_video_dataScalarFieldEnum = {
  id: 'id',
  like_count: 'like_count',
  view_count: 'view_count',
  common_concept_video_id: 'common_concept_video_id'
};

exports.Prisma.Common_concept_video_likeScalarFieldEnum = {
  id: 'id',
  common_concept_video_id: 'common_concept_video_id',
  user_uuid: 'user_uuid',
  created_at: 'created_at'
};

exports.Prisma.Common_concept_video_commentScalarFieldEnum = {
  id: 'id',
  common_concept_video_data_id: 'common_concept_video_data_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  content: 'content',
  user_uuid: 'user_uuid'
};

exports.Prisma.Common_concept_video_playScalarFieldEnum = {
  id: 'id',
  common_concept_video_id: 'common_concept_video_id',
  user_uuid: 'user_uuid',
  created_at: 'created_at',
  ended_at: 'ended_at'
};

exports.Prisma.ConceptScalarFieldEnum = {
  id: 'id',
  cls_id: 'cls_id',
  type: 'type',
  order_no: 'order_no',
  type_name: 'type_name',
  latex_data: 'latex_data',
  content_status: 'content_status',
  is_algeomath: 'is_algeomath',
  created_by: 'created_by',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Concept_performScalarFieldEnum = {
  id: 'id',
  concept_id: 'concept_id',
  learning_sys_id: 'learning_sys_id',
  user_uuid: 'user_uuid',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Concept_solvingScalarFieldEnum = {
  id: 'id',
  concept_id: 'concept_id',
  user_uuid: 'user_uuid',
  video_path: 'video_path',
  status: 'status',
  pinned: 'pinned',
  scope: 'scope',
  created_at: 'created_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Concept_solving_shareScalarFieldEnum = {
  id: 'id',
  concept_video_id: 'concept_video_id',
  class_table_id: 'class_table_id'
};

exports.Prisma.Concept_referenceScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  learning_sys_id: 'learning_sys_id',
  concept_id: 'concept_id',
  scope: 'scope',
  class_table_id: 'class_table_id',
  created_at: 'created_at'
};

exports.Prisma.Concept_reference_dataScalarFieldEnum = {
  id: 'id',
  concept_reference_id: 'concept_reference_id',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at',
  content_title: 'content_title',
  content_data: 'content_data',
  like_count: 'like_count',
  view_count: 'view_count'
};

exports.Prisma.Concept_reference_fileScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  path: 'path',
  concept_reference_data_id: 'concept_reference_data_id'
};

exports.Prisma.Concept_reference_likeScalarFieldEnum = {
  id: 'id',
  concept_reference_id: 'concept_reference_id',
  user_uuid: 'user_uuid',
  created_at: 'created_at'
};

exports.Prisma.Concept_reference_commentScalarFieldEnum = {
  id: 'id',
  concept_reference_id: 'concept_reference_id',
  comment: 'comment',
  user_uuid: 'user_uuid',
  created_at: 'created_at',
  deleted_at: 'deleted_at',
  updated_at: 'updated_at'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  type: 'type',
  target_id: 'target_id',
  reason: 'reason',
  reason_detail: 'reason_detail',
  admin_pid: 'admin_pid',
  status: 'status',
  created_at: 'created_at',
  processed_at: 'processed_at'
};

exports.Prisma.Learning_historyScalarFieldEnum = {
  id: 'id',
  created_at: 'created_at',
  state: 'state',
  user_uuid: 'user_uuid',
  cls_id: 'cls_id'
};

exports.Prisma.Study_chapter_planScalarFieldEnum = {
  id: 'id',
  uuid: 'uuid',
  semester_id: 'semester_id',
  learning_sys_id: 'learning_sys_id',
  progress_rate: 'progress_rate',
  achievement_level: 'achievement_level',
  correct_rate: 'correct_rate',
  metarecognition_rate: 'metarecognition_rate'
};

exports.Prisma.PartnerScalarFieldEnum = {
  id: 'id',
  partner_id: 'partner_id',
  grade: 'grade',
  created_at: 'created_at'
};

exports.Prisma.Batch_transferScalarFieldEnum = {
  id: 'id',
  partner_id: 'partner_id',
  transfer_id: 'transfer_id',
  partner_access_token: 'partner_access_token',
  start_time: 'start_time',
  created_at: 'created_at'
};

exports.Prisma.Chunk_format_dataScalarFieldEnum = {
  id: 'id',
  chunk_index: 'chunk_index',
  chunk_data: 'chunk_data',
  chunk_size: 'chunk_size',
  transfer_id: 'transfer_id',
  created_at: 'created_at'
};

exports.Prisma.ConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  trigger_uuid: 'trigger_uuid',
  taker_uuid: 'taker_uuid',
  action: 'action',
  additional_data1: 'additional_data1',
  additional_data2: 'additional_data2',
  additional_data3: 'additional_data3',
  additional_text: 'additional_text',
  read: 'read',
  created_at: 'created_at'
};

exports.Prisma.Achievement_standardScalarFieldEnum = {
  id: 'id',
  achievement_id: 'achievement_id',
  achievement_desc: 'achievement_desc',
  eval_model: 'eval_model',
  model_desc: 'model_desc',
  achievement_level: 'achievement_level',
  level_desc: 'level_desc',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Achievement_regionScalarFieldEnum = {
  id: 'id',
  achievement_id: 'achievement_id',
  region_name: 'region_name',
  achievement_level: 'achievement_level',
  eval_category: 'eval_category',
  level_desc: 'level_desc',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Book_markerScalarFieldEnum = {
  id: 'id',
  user_uuid: 'user_uuid',
  learning_sys_id: 'learning_sys_id',
  semester: 'semester',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ProblemType = exports.$Enums.ProblemType = {
  GENERAL: 'GENERAL',
  DIAGNOSTIC: 'DIAGNOSTIC',
  UNIT_PROGRESS: 'UNIT_PROGRESS',
  UNIT_END: 'UNIT_END',
  COMPREHENSIVE: 'COMPREHENSIVE'
};

exports.Difficulty = exports.$Enums.Difficulty = {
  LOW: 'LOW',
  MIDDLE: 'MIDDLE',
  HIGH: 'HIGH',
  HIGHEST: 'HIGHEST'
};

exports.AnswerType = exports.$Enums.AnswerType = {
  SHORT: 'SHORT',
  SELECT: 'SELECT',
  MULTISELECT: 'MULTISELECT'
};

exports.ContentStatus = exports.$Enums.ContentStatus = {
  ACTIVED: 'ACTIVED',
  TEMPSAVE: 'TEMPSAVE',
  TEMPDELETE: 'TEMPDELETE',
  DELETED: 'DELETED'
};

exports.StudyType = exports.$Enums.StudyType = {
  BASIC: 'BASIC',
  CONFIRM: 'CONFIRM',
  FEEDBACK: 'FEEDBACK',
  ADDITIONAL: 'ADDITIONAL'
};

exports.ProblemSolvingScope = exports.$Enums.ProblemSolvingScope = {
  ME: 'ME',
  CLASS: 'CLASS',
  ALL: 'ALL'
};

exports.VideoProcessingStatus = exports.$Enums.VideoProcessingStatus = {
  IDLE: 'IDLE',
  PROCESSING: 'PROCESSING',
  DONE: 'DONE',
  ERROR: 'ERROR'
};

exports.AssessmentType = exports.$Enums.AssessmentType = {
  NONE: 'NONE',
  DIAGNOSTIC: 'DIAGNOSTIC',
  UNIT: 'UNIT',
  COMPREHENSIVE: 'COMPREHENSIVE'
};

exports.AchievementType = exports.$Enums.AchievementType = {
  NONE: 'NONE',
  DIAGNOSTIC: 'DIAGNOSTIC',
  UNIT_PROGRESS: 'UNIT_PROGRESS',
  UNIT_END: 'UNIT_END',
  COMPREHENSIVE: 'COMPREHENSIVE'
};

exports.AnnouncementScope = exports.$Enums.AnnouncementScope = {
  ALL: 'ALL',
  STUDENTS: 'STUDENTS',
  PARENTS: 'PARENTS'
};

exports.AnnouncementType = exports.$Enums.AnnouncementType = {
  MAINTENANCE: 'MAINTENANCE',
  EMERGENCY: 'EMERGENCY',
  ETC: 'ETC'
};

exports.QuestionStatus = exports.$Enums.QuestionStatus = {
  IDLE: 'IDLE',
  QUESTION: 'QUESTION',
  SOLVING: 'SOLVING'
};

exports.QuestionScope = exports.$Enums.QuestionScope = {
  ME: 'ME',
  CLASS: 'CLASS',
  ALL: 'ALL'
};

exports.UnitType = exports.$Enums.UnitType = {
  UNIT: 'UNIT',
  CHAPTER: 'CHAPTER',
  SECTION: 'SECTION',
  SUBSECTION: 'SUBSECTION'
};

exports.AssignmentType = exports.$Enums.AssignmentType = {
  BASIC: 'BASIC',
  CONFIRM: 'CONFIRM',
  FEEDBACK: 'FEEDBACK',
  METACOGNITION: 'METACOGNITION'
};

exports.AssignmentStatus = exports.$Enums.AssignmentStatus = {
  IDEL: 'IDEL',
  SUBMIT: 'SUBMIT'
};

exports.ConceptType = exports.$Enums.ConceptType = {
  BASIC: 'BASIC',
  ADVANCED: 'ADVANCED'
};

exports.ConceptSolvingScope = exports.$Enums.ConceptSolvingScope = {
  ME: 'ME',
  CLASS: 'CLASS',
  ALL: 'ALL'
};

exports.ReportType = exports.$Enums.ReportType = {
  CONCENT_VIDEO: 'CONCENT_VIDEO',
  PROBLEM_SOLVING_VIDEO: 'PROBLEM_SOLVING_VIDEO'
};

exports.ReportStatus = exports.$Enums.ReportStatus = {
  IDLE: 'IDLE',
  WORKING: 'WORKING',
  DONE: 'DONE',
  REJECT: 'REJECT'
};

exports.InOutState = exports.$Enums.InOutState = {
  Initialized: 'Initialized',
  Terminated: 'Terminated'
};

exports.EvaluationModel = exports.$Enums.EvaluationModel = {
  SHORT_SELECT: 'SHORT_SELECT',
  SHORT: 'SHORT',
  SELECT: 'SELECT'
};

exports.AchivementLevel = exports.$Enums.AchivementLevel = {
  A: 'A',
  B: 'B',
  C: 'C',
  D: 'D',
  E: 'E'
};

exports.EvaluationCategory = exports.$Enums.EvaluationCategory = {
  KU: 'KU',
  PF: 'PF',
  VA: 'VA'
};

exports.Prisma.ModelName = {
  problem: 'problem',
  study: 'study',
  study_problem: 'study_problem',
  study_perform: 'study_perform',
  shared_solution_video: 'shared_solution_video',
  shared_solution_video_data: 'shared_solution_video_data',
  shared_solution_video_like: 'shared_solution_video_like',
  shared_solution_video_comment: 'shared_solution_video_comment',
  shared_solution_video_share: 'shared_solution_video_share',
  concept_video: 'concept_video',
  concept_video_data: 'concept_video_data',
  concept_video_like: 'concept_video_like',
  concept_video_comment: 'concept_video_comment',
  concept_video_share: 'concept_video_share',
  assessment: 'assessment',
  assessment_class: 'assessment_class',
  user: 'user',
  user_achievement: 'user_achievement',
  user_group: 'user_group',
  announcement_content: 'announcement_content',
  announcement_comment: 'announcement_comment',
  announcement_content_like: 'announcement_content_like',
  learning_level: 'learning_level',
  learning_level_group: 'learning_level_group',
  question: 'question',
  std_learning_sys_pack: 'std_learning_sys_pack',
  std_learning_sys_doc: 'std_learning_sys_doc',
  std_learning_sys: 'std_learning_sys',
  learning_sys_pack: 'learning_sys_pack',
  learning_sys_doc: 'learning_sys_doc',
  learning_sys: 'learning_sys',
  pre_learning_map: 'pre_learning_map',
  learning_map: 'learning_map',
  learning_map_node: 'learning_map_node',
  semester: 'semester',
  school_class: 'school_class',
  class_schedule: 'class_schedule',
  school: 'school',
  assignment_finish: 'assignment_finish',
  assignment_gave: 'assignment_gave',
  assignment_gave_node: 'assignment_gave_node',
  assignment_gave_user: 'assignment_gave_user',
  assignment_problem: 'assignment_problem',
  assignment_perform: 'assignment_perform',
  assessment_perform: 'assessment_perform',
  assessment_problem: 'assessment_problem',
  admin: 'admin',
  admin_create_history: 'admin_create_history',
  admin_function: 'admin_function',
  admin_function_on_admin_group: 'admin_function_on_admin_group',
  admin_group: 'admin_group',
  user_plan_note: 'user_plan_note',
  user_status: 'user_status',
  common_concept_video: 'common_concept_video',
  common_concept_video_data: 'common_concept_video_data',
  common_concept_video_like: 'common_concept_video_like',
  common_concept_video_comment: 'common_concept_video_comment',
  common_concept_video_play: 'common_concept_video_play',
  concept: 'concept',
  concept_perform: 'concept_perform',
  concept_solving: 'concept_solving',
  concept_solving_share: 'concept_solving_share',
  concept_reference: 'concept_reference',
  concept_reference_data: 'concept_reference_data',
  concept_reference_file: 'concept_reference_file',
  concept_reference_like: 'concept_reference_like',
  concept_reference_comment: 'concept_reference_comment',
  report: 'report',
  learning_history: 'learning_history',
  study_chapter_plan: 'study_chapter_plan',
  partner: 'partner',
  batch_transfer: 'batch_transfer',
  chunk_format_data: 'chunk_format_data',
  config: 'config',
  notification: 'notification',
  achievement_standard: 'achievement_standard',
  achievement_region: 'achievement_region',
  book_marker: 'book_marker'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
