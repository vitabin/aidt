// packages/node-cache-manager-ioredis/src/lib/node-cache-manager-ioredis.ts
import Redis from "ioredis";
var getVal = (value) => JSON.stringify(value) || '"undefined"';
var RedisStore = class {
  client;
  internalTtl;
  isCacheable;
  constructor(args) {
    this.internalTtl = args.ttl;
    this.isCacheable = args.isCacheable || ((value) => value !== void 0 && value !== null);
    if (args.instanceConfig) {
      this.client = new Redis(args.instanceConfig);
    }
    if (args.clusterConfig) {
      this.client = new Redis.Cluster(args.clusterConfig.nodes, args.clusterConfig.options);
    }
    if (args.redisInstance) {
      this.client = args.redisInstance;
    }
    if (!args.instanceConfig && !args.clusterConfig && !args.redisInstance) {
      this.client = new Redis(args);
    }
  }
  async set(key, value, ttl) {
    if (!this.isCacheable(value)) {
      throw new Error(`${value} is not cacheable`);
    }
    const actualTtl = ttl ?? this.internalTtl;
    if (actualTtl) {
      await this.client.setex(key, actualTtl, getVal(value));
    } else {
      await this.client.set(key, getVal(value));
    }
  }
  async get(key) {
    const value = await this.client.get(key);
    if (value === null || value === void 0) {
      return void 0;
    }
    return JSON.parse(value);
  }
  async mset(args, ttl) {
    const actualTtl = ttl ?? this.internalTtl;
    if (actualTtl) {
      const multi = this.client.multi();
      for (const [key, value] of args) {
        if (!this.isCacheable(value)) {
          throw new Error(`${value} is not cacheable`);
        }
        multi.setex(key, actualTtl, getVal(value));
      }
      await multi.exec();
      return;
    }
    await this.client.mset(
      args.flatMap(([key, value]) => {
        if (!this.isCacheable(value)) {
          throw new Error(`${value} is not cacheable`);
        }
        return [key, getVal(value)];
      })
    );
  }
  async mget(...args) {
    const values = await this.client.mget(args);
    return values.map((val) => val === null || val === void 0 ? void 0 : JSON.parse(val));
  }
  async mdel(...args) {
    await this.client.del(args);
  }
  async del(key) {
    await this.client.del(key);
  }
  async reset() {
    await this.client.flushall();
  }
  async keys(pattern = "*") {
    return this.client.keys(pattern);
  }
  async ttl(key) {
    return this.client.ttl(key);
  }
};
var ioRedisStore = (args) => {
  if (!args) {
    return new RedisStore({});
  }
  return new RedisStore(args);
};
export {
  ioRedisStore
};
