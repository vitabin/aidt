import { Cache, Store, Config } from 'cache-manager';
import Redis, { Cluster, RedisOptions, RedisKey, ClusterNode, ClusterOptions } from 'ioredis';

type RedisCache = Cache<IoRedisStore>;
interface IoRedisStore extends Store {
    readonly isCacheable: (value: unknown) => boolean;
    get client(): Redis | Cluster;
}
type ClusterConfig = {
    nodes: ClusterNode[];
    options?: ClusterOptions;
};
type Args = {
    redisInstance?: Redis | Cluster;
    clusterConfig?: ClusterConfig;
    instanceConfig?: RedisOptions;
} & Config & RedisOptions;
declare class RedisStore implements IoRedisStore {
    readonly client: Redis | Cluster;
    readonly internalTtl: number | undefined;
    readonly isCacheable: (value: unknown) => boolean;
    constructor(args: Args);
    set<T>(key: RedisKey, value: T, ttl?: number): Promise<void>;
    get<T>(key: RedisKey): Promise<T | undefined>;
    mset(args: [string, unknown][], ttl?: number): Promise<void>;
    mget(...args: string[]): Promise<unknown[]>;
    mdel(...args: string[]): Promise<void>;
    del(key: RedisKey): Promise<void>;
    reset(): Promise<void>;
    keys(pattern?: string): Promise<string[]>;
    ttl(key: string): Promise<number>;
}
declare const ioRedisStore: (args?: Args) => RedisStore;

export { type RedisCache, ioRedisStore };
