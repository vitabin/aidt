"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.meta = exports.configs = exports.rules = void 0;
const cognitiveComplexity = __importStar(require("./rules/cognitive-complexity"));
const elseifWithoutElse = __importStar(require("./rules/elseif-without-else"));
const maxSwitchCases = __importStar(require("./rules/max-switch-cases"));
const noAllDuplicatedBranches = __importStar(require("./rules/no-all-duplicated-branches"));
const noCollapsibleIf = __importStar(require("./rules/no-collapsible-if"));
const noCollectionSizeMischeck = __importStar(require("./rules/no-collection-size-mischeck"));
const noDuplicateString = __importStar(require("./rules/no-duplicate-string"));
const noDuplicatedBranches = __importStar(require("./rules/no-duplicated-branches"));
const noElementOverwrite = __importStar(require("./rules/no-element-overwrite"));
const noEmptyCollection = __importStar(require("./rules/no-empty-collection"));
const noExtraArguments = __importStar(require("./rules/no-extra-arguments"));
const noGratuitousExpressions = __importStar(require("./rules/no-gratuitous-expressions"));
const noIdenticalConditions = __importStar(require("./rules/no-identical-conditions"));
const noIdenticalExpressions = __importStar(require("./rules/no-identical-expressions"));
const noIdenticalFunctions = __importStar(require("./rules/no-identical-functions"));
const noIgnoredReturn = __importStar(require("./rules/no-ignored-return"));
const noInvertedBooleanCheck = __importStar(require("./rules/no-inverted-boolean-check"));
const noNestedSwitch = __importStar(require("./rules/no-nested-switch"));
const noNestedTemplateLiterals = __importStar(require("./rules/no-nested-template-literals"));
const noOneIterationLoop = __importStar(require("./rules/no-one-iteration-loop"));
const noRedundantBoolean = __importStar(require("./rules/no-redundant-boolean"));
const noRedundantJump = __importStar(require("./rules/no-redundant-jump"));
const noSameLineConditional = __importStar(require("./rules/no-same-line-conditional"));
const noSmallSwitch = __importStar(require("./rules/no-small-switch"));
const noUnusedCollection = __importStar(require("./rules/no-unused-collection"));
const noUseOfEmptyReturnValue = __importStar(require("./rules/no-use-of-empty-return-value"));
const noUselessCatch = __importStar(require("./rules/no-useless-catch"));
const nonExistentOperator = __importStar(require("./rules/non-existent-operator"));
const preferImmediateReturn = __importStar(require("./rules/prefer-immediate-return"));
const preferObjectLiteral = __importStar(require("./rules/prefer-object-literal"));
const preferSingleBooleanReturn = __importStar(require("./rules/prefer-single-boolean-return"));
const preferWhile = __importStar(require("./rules/prefer-while"));
const package_json_1 = require("../package.json");
exports.rules = {
    'cognitive-complexity': cognitiveComplexity,
    'elseif-without-else': elseifWithoutElse,
    'max-switch-cases': maxSwitchCases,
    'no-all-duplicated-branches': noAllDuplicatedBranches,
    'no-collapsible-if': noCollapsibleIf,
    'no-collection-size-mischeck': noCollectionSizeMischeck,
    'no-duplicate-string': noDuplicateString,
    'no-duplicated-branches': noDuplicatedBranches,
    'no-element-overwrite': noElementOverwrite,
    'no-empty-collection': noEmptyCollection,
    'no-extra-arguments': noExtraArguments,
    'no-gratuitous-expressions': noGratuitousExpressions,
    'no-identical-conditions': noIdenticalConditions,
    'no-identical-expressions': noIdenticalExpressions,
    'no-identical-functions': noIdenticalFunctions,
    'no-ignored-return': noIgnoredReturn,
    'no-inverted-boolean-check': noInvertedBooleanCheck,
    'no-nested-switch': noNestedSwitch,
    'no-nested-template-literals': noNestedTemplateLiterals,
    'no-one-iteration-loop': noOneIterationLoop,
    'no-redundant-boolean': noRedundantBoolean,
    'no-redundant-jump': noRedundantJump,
    'no-same-line-conditional': noSameLineConditional,
    'no-small-switch': noSmallSwitch,
    'no-unused-collection': noUnusedCollection,
    'no-use-of-empty-return-value': noUseOfEmptyReturnValue,
    'no-useless-catch': noUselessCatch,
    'non-existent-operator': nonExistentOperator,
    'prefer-immediate-return': preferImmediateReturn,
    'prefer-object-literal': preferObjectLiteral,
    'prefer-single-boolean-return': preferSingleBooleanReturn,
    'prefer-while': preferWhile,
};
const recommendedLegacyConfig = { plugins: ['sonarjs'], rules: {} };
const recommendedConfig = {
    plugins: {
        sonarjs: {
            rules: exports.rules,
        },
    },
    rules: {},
};
for (const key in exports.rules) {
    const rule = exports.rules[key];
    const recommended = rule.meta.docs?.recommended;
    recommendedConfig.rules[`sonarjs/${key}`] = recommended === undefined ? 'off' : 'error';
}
recommendedLegacyConfig.rules = recommendedConfig.rules;
exports.configs = {
    recommended: recommendedConfig,
    'recommended-legacy': recommendedLegacyConfig,
};
exports.meta = {
    name: package_json_1.name,
    version: package_json_1.version,
};
exports.default = { rules: exports.rules, configs: exports.configs, meta: exports.meta };
